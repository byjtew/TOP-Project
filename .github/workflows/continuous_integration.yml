name: CMake

on:
  push:
    branches: [ master, develop* ]
  pull_request:
    branches: [ master, develop* ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install requirements
        run: |
          sudo apt-get update -yq && \
          sudo apt-get install cmake mpich imagemagick gnuplot -yq

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=`which mpicc`

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Simulate
        working-directory: ${{github.workspace}}/build/bin
        # Replaces the iteration amount by 10, then run the program with 4 processes
        run: |
          mpirun -np 4 ./main small_config.txt

      - name: Anaylse results
        working-directory: ${{github.workspace}}/build/bin
        run: |
          mkdir GIF_TMP && \
          sh gen_animate_gif_legacy.sh ./resultat.raw ./output.gif && \
          [[ $? -eq 0 ]] && echo "Success" || (echo "Failure" && exit 1)


      
